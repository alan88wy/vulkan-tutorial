# Now you may run cmake like following samples: 
# to generate:                 
#
# cmake -S "" -B "build" -G "Visual Studio 15 2017 Win64"
# or
# cmake -S "" -B "build" -G "Visual Studio 16 2019" -A "x64" 
#
# to build:
# 
# cmake --build "build"

cmake_minimum_required(VERSION 3.16.0 FATAL_ERROR)

set(CMAKE_SYSTEM_VERSION 10.0.22621.0 CACHE STRING "" FORCE)

project(VulkanTest CXX)

################################################################################
# Set target arch type if empty. Visual studio solution generator provides it.
################################################################################
if(NOT CMAKE_VS_PLATFORM_NAME)
    set(CMAKE_VS_PLATFORM_NAME "x64")
endif()
message("${CMAKE_VS_PLATFORM_NAME} architecture in use")

if(NOT ("${CMAKE_VS_PLATFORM_NAME}" STREQUAL "x64"))
    message(FATAL_ERROR "${CMAKE_VS_PLATFORM_NAME} arch is not supported!")
endif()

################################################################################
# Global configuration types
################################################################################
set(CMAKE_CONFIGURATION_TYPES
    "Debug"
    "MinSizeRel"
    "Release"
    "RelWithDebInfo"
    CACHE STRING "" FORCE
)

################################################################################
# Global compiler options
################################################################################
if(MSVC)
    # remove default flags provided with CMake for MSVC
    set(CMAKE_CXX_FLAGS "")
    set(CMAKE_CXX_FLAGS_DEBUG "")
    set(CMAKE_CXX_FLAGS_MINSIZEREL "")
    set(CMAKE_CXX_FLAGS_RELEASE "")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "")
endif()

################################################################################
# Global linker options
################################################################################
if(MSVC)
    # remove default flags provided with CMake for MSVC
    set(CMAKE_EXE_LINKER_FLAGS "")
    set(CMAKE_MODULE_LINKER_FLAGS "")
    set(CMAKE_SHARED_LINKER_FLAGS "")
    set(CMAKE_STATIC_LINKER_FLAGS "")
    set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS}")
    set(CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL "${CMAKE_MODULE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL "${CMAKE_SHARED_LINKER_FLAGS}")
    set(CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL "${CMAKE_STATIC_LINKER_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS}")
    set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS}")
    set(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_MODULE_LINKER_FLAGS}")
    set(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_SHARED_LINKER_FLAGS}")
    set(CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_STATIC_LINKER_FLAGS}")
endif()

################################################################################
# Nuget packages function stub.
################################################################################
function(use_package TARGET PACKAGE VERSION)
    message(WARNING "No implementation of use_package. Create yours. "
                    "Package \"${PACKAGE}\" with version \"${VERSION}\" "
                    "for target \"${TARGET}\" is ignored!")
endfunction()

################################################################################
# Common utils
################################################################################
include(CMake/Utils.cmake)

################################################################################
# Additional Global Settings(add specific info there)
################################################################################
include(CMake/GlobalSettingsInclude.cmake OPTIONAL)

################################################################################
# Use solution folders feature
################################################################################
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

################################################################################
# Sub-projects
################################################################################



























set(PROJECT_NAME ALL_BUILD)

################################################################################
# Source groups
################################################################################
set(no_group_source_files
    "../CMakeLists.txt"
)
source_group("" FILES ${no_group_source_files})

set(ALL_FILES
    ${no_group_source_files}
)

add_custom_target(${PROJECT_NAME} SOURCES ${ALL_FILES})



























set(PROJECT_NAME VulkanTest)

################################################################################
# Source groups
################################################################################
set(no_group_source_files
    "../CMakeLists.txt"
)
source_group("" FILES ${no_group_source_files})

set(Sources
    "../src/main.cpp"
)
source_group("Sources" FILES ${Sources})

set(ALL_FILES
    ${no_group_source_files}
    ${Sources}
)

################################################################################
# Target
################################################################################
add_executable(${PROJECT_NAME} ${ALL_FILES})

use_props(${PROJECT_NAME} "${CMAKE_CONFIGURATION_TYPES}" "${DEFAULT_CXX_PROPS}")
set_target_properties(${PROJECT_NAME} PROPERTIES
    VS_GLOBAL_KEYWORD "Win32Proj"
)
################################################################################
# Target name
################################################################################
set_target_properties(${PROJECT_NAME} PROPERTIES
    TARGET_NAME_DEBUG          "VulkanTest"
    TARGET_NAME_RELEASE        "VulkanTest"
    TARGET_NAME_MINSIZEREL     "VulkanTest"
    TARGET_NAME_RELWITHDEBINFO "VulkanTest"
)
################################################################################
# Output directory
################################################################################
set_target_properties(${PROJECT_NAME} PROPERTIES
    OUTPUT_DIRECTORY_DEBUG          "D:/Learning/vulkan/vulkan-tutorial/bin/"
    OUTPUT_DIRECTORY_RELEASE        "D:/Learning/vulkan/vulkan-tutorial/bin/"
    OUTPUT_DIRECTORY_MINSIZEREL     "D:/Learning/vulkan/vulkan-tutorial/bin/"
    OUTPUT_DIRECTORY_RELWITHDEBINFO "D:/Learning/vulkan/vulkan-tutorial/bin/"
)
set_target_properties(${PROJECT_NAME} PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY_DEBUG          "D:/Learning/vulkan/vulkan-tutorial/build/Debug"
    ARCHIVE_OUTPUT_DIRECTORY_RELEASE        "D:/Learning/vulkan/vulkan-tutorial/build/Release"
    ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL     "D:/Learning/vulkan/vulkan-tutorial/build/MinSizeRel"
    ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO "D:/Learning/vulkan/vulkan-tutorial/build/RelWithDebInfo"
)
set_target_properties(${PROJECT_NAME} PROPERTIES
    ARCHIVE_OUTPUT_NAME_DEBUG          "VulkanTest"
    ARCHIVE_OUTPUT_NAME_RELEASE        "VulkanTest"
    ARCHIVE_OUTPUT_NAME_MINSIZEREL     "VulkanTest"
    ARCHIVE_OUTPUT_NAME_RELWITHDEBINFO "VulkanTest"
)
################################################################################
# MSVC runtime library
################################################################################
get_property(MSVC_RUNTIME_LIBRARY_DEFAULT TARGET ${PROJECT_NAME} PROPERTY MSVC_RUNTIME_LIBRARY)
string(CONCAT "MSVC_RUNTIME_LIBRARY_STR"
    $<$<CONFIG:Debug>:
        MultiThreadedDebugDLL
    >
    $<$<CONFIG:Release>:
        MultiThreadedDLL
    >
    $<$<CONFIG:MinSizeRel>:
        MultiThreadedDLL
    >
    $<$<CONFIG:RelWithDebInfo>:
        MultiThreadedDLL
    >
    $<$<NOT:$<OR:$<CONFIG:Debug>,$<CONFIG:Release>,$<CONFIG:MinSizeRel>,$<CONFIG:RelWithDebInfo>>>:${MSVC_RUNTIME_LIBRARY_DEFAULT}>
)
set_target_properties(${PROJECT_NAME} PROPERTIES MSVC_RUNTIME_LIBRARY ${MSVC_RUNTIME_LIBRARY_STR})

################################################################################
# Include directories
################################################################################
target_include_directories(${PROJECT_NAME} PUBLIC
    "${CMAKE_CURRENT_SOURCE_DIR}/../Vendors/glfw/include;"
    "${CMAKE_CURRENT_SOURCE_DIR}/../Vendors/Vulkan/1.3.283.0/Include;"
    "${CMAKE_CURRENT_SOURCE_DIR}/../include"
)

################################################################################
# Compile definitions
################################################################################
target_compile_definitions(${PROJECT_NAME} PRIVATE
    "$<$<CONFIG:Debug>:"
        "CMAKE_INTDIR=\"Debug\""
    ">"
    "$<$<CONFIG:Release>:"
        "NDEBUG;"
        "CMAKE_INTDIR=\"Release\""
    ">"
    "$<$<CONFIG:MinSizeRel>:"
        "NDEBUG;"
        "CMAKE_INTDIR=\"MinSizeRel\""
    ">"
    "$<$<CONFIG:RelWithDebInfo>:"
        "NDEBUG;"
        "CMAKE_INTDIR=\"RelWithDebInfo\""
    ">"
    "WIN32;"
    "_WINDOWS;"
    "VK_USE_PLATFORM_WIN32_KHR;"
    "_MBCS"
)

################################################################################
# Compile and link options
################################################################################
if(MSVC)
    target_compile_options(${PROJECT_NAME} PRIVATE
        $<$<CONFIG:Debug>:
            /Od;
            /Ob0;
            /RTC1;
            /Zi
        >
        $<$<CONFIG:Release>:
            /O2;
            /Ob2;
            ${DEFAULT_CXX_DEBUG_INFORMATION_FORMAT}
        >
        $<$<CONFIG:MinSizeRel>:
            /O1;
            /Ob1;
            ${DEFAULT_CXX_DEBUG_INFORMATION_FORMAT}
        >
        $<$<CONFIG:RelWithDebInfo>:
            /O2;
            /Ob1;
            /Zi
        >
        ${DEFAULT_CXX_EXCEPTION_HANDLING};
        /Y-
    )
    target_link_options(${PROJECT_NAME} PRIVATE
        $<$<CONFIG:Debug>:
            /DEBUG;
            /INCREMENTAL
        >
        $<$<CONFIG:Release>:
            /INCREMENTAL:NO
        >
        $<$<CONFIG:MinSizeRel>:
            /INCREMENTAL:NO
        >
        $<$<CONFIG:RelWithDebInfo>:
            /DEBUG;
            /INCREMENTAL
        >
        /MANIFEST;
        /SUBSYSTEM:CONSOLE;
        /machine:x64
    )
endif()

################################################################################
# Dependencies
################################################################################
# Link with other targets.
target_link_libraries(${PROJECT_NAME} PRIVATE
    ZERO_CHECK
)

set(ADDITIONAL_LIBRARY_DEPENDENCIES
    "kernel32;"
    "user32;"
    "gdi32;"
    "winspool;"
    "shell32;"
    "ole32;"
    "oleaut32;"
    "uuid;"
    "comdlg32;"
    "advapi32"
)
target_link_libraries(${PROJECT_NAME} PRIVATE "${ADDITIONAL_LIBRARY_DEPENDENCIES}")



























set(PROJECT_NAME ZERO_CHECK)

################################################################################
# Source groups
################################################################################
set(CMake_Rules
    "CMakeFiles/2c7c3d0f3d958d638bd3f4e9963158b3/generate.stamp.rule"
)
source_group("CMake Rules" FILES ${CMake_Rules})

set(ALL_FILES
    ${CMake_Rules}
)

add_custom_target(${PROJECT_NAME} SOURCES ${ALL_FILES})



























set(PROJECT_NAME assets)

################################################################################
# Source groups
################################################################################
set(no_group_source_files
    "../CMakeLists.txt"
)
source_group("" FILES ${no_group_source_files})

set(ALL_FILES
    ${no_group_source_files}
)

add_custom_target(${PROJECT_NAME} SOURCES ${ALL_FILES})

